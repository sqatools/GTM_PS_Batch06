1. install pytest with command on terminal OR from pycharm settings
   pip install pytest

2. create a pytest test file with prefix and "test_"
   -> Each test file name in the pytest framework should start with "test_" prefix

3. Create a test function in the test file.
   -> Each test function name should start with "test_" as prefix.

4. Run the test case with the given command in the terminal
   python -m pytest -v .\<test_file_name>
   -> first we have to open the on the location of file.
   -> then execute the test cases with the above command
   -> The execution of the command should return below output

  test_math_operation.py::test_addition PASSED                  [ 33%]
  test_math_operation.py::test_multiplication FAILED            [ 66%]
  test_math_operation.py::test_subtraction PASSED               [100%]

  FAILED test_math_operation.py::test_multiplication - assert (50 * 5) == 300
  ============================ 1 failed, 2 passed in 1.87s ===================


5. Add markers to the test cases. with the help @pytest.mark.smoke and execute
   the below command
   -> python -m pytest -v -m "smoke" .\test_file_name

6. Add multiple marker to the same test case and execute with and command
  -> python -m pytest -v -m "smoke and sanity" .\test_file_name

7. execute different marker test cases with OR command
  -> python -m pytest -v -m "smoke or sanity" .\test_file_name

8. Marker execution cab be done on folder level as well, where it will
   find all the related marker test cases in each test file and execute.


9. XFAIL marker. @pytest.mark.xfail
   -> xfail marker generally we use for unstable test cases.
   -> If test cases failed, then it will mark test as xfailed in report
   -> If test cases passed, then it will mark test as xpassed in the resport

10. SKIP test cases
   -> There are two way to skip the test cases unconditional skip and conditional skip
   -> @pytest.mark.skip : This is unconditional skip, test case will skip in any condition
   -> @pytest.mark.skipif(condition ,  reason="skip reason")
      condition skip only executes in specific condition'
   ->  Test cases are also going to marks as skipped in the result.

    ===== 1 failed, 3 passed, 2 skipped, 1 xfailed, 2 xpassed, 11 warnings in 0.37s ====


11. Parametrization of test function : It allows to execute one single test function with multiple
    parameter inputs and consider as indiadual result for each input value.
    @pytest.mark.parametrize("username, password", [('user1', 'pass1'), ('user2', 'pass2')]
    def test_login(username, password):
        print("Username  :", username)
        print("Password :", password)


12. HTML Report :
    -> To Generate the report we have to install pytest package(pytest-html)
       pip install pytest-html

    ->  To regenerate report we have to mention the report folder path,
        where it will create html report file

     python -m pytest -v .\basic_test\ --html=report_data\report.html


13. Register custom markers in pytest.ini configuration file
    -> create one config file with name pytest.ini
    -> Add following lines into the file. then it will auto register the custom markers.

    [pytest]
    markers=
        sanity: sanity test cases marker
        regression: regression test cases marker
        smoke: smoke test cases marker.



14. Fixture:
    Fixture is the function that we want execution  before and after execution of each cases or test suite
    Fixture has following scope:

   -> function : function level fixture executes along with each function
   -> module : Module level fixture execute with test file level
   -> package : Package level fixture will execute with package initiation which contains multiple modules.
   -> session : Session level fixture will execution along with automation initiation and after completion of
          automation execution.
   -> class : class level fixture will work will each class execution.

   # Execution structure of fixtures as per the scope.
   i). session ->  package -> module ->  function
   ii). session ->  package -> module ->  class ->  function
